Аналог:

http://www.cardplayer.com/poker-tools/odds-calculator/texas-holdem

https://imgur.com/a/SXogy



Технологии:
 
   Front-end
   
     AngularJS
 
     Bootstrap
 
     Gulp или Webpack


   Back-end

     Node.js

     ES6

     Express

     Ejs views




Структура сайта:

    1) Landing page 
Главная страница проекта, чистый html/css, без Ангулара

    2) Calculator 
Страница с основным функционалом

    3) Settings 
  Настройки калькулятора - сколько раз запускать симуляцию игры, какие карты исключить из колоды

    4) History 
История вычислений, храниться локально в браузере используя LocalStorage.
 Отображается в виде списка либо таблицы.
 Каждый элемент истории хранит все указанные карты, количество игроков, результаты для каждого игрока.
 Данные отображаются в кратком виде (уменьшенные иконки карт, более компактное отображение)

Технические детали:

Алгоритм Монте-Карло 
http://www.poker-wiki.ru/poker/%D0%9F%D0%BE%D0%BA%D0%B5%D1%80%D0%BD%D1%8B%D0%B9_%D0%BA%D0%B0%D0%BB%D1%8C%D0%BA%D1%83%D0%BB%D1%8F%D1%82%D0%BE%D1%80

Игра - Техасский холдем https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%85%D0%B0%D1%81%D1%81%D0%BA%D0%B8%D0%B9_%D1%85%D0%BE%D0%BB%D0%B4%D0%B5%D0%BC

Для выиграша должны учитываться все комбинации возможные в покере:
 https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BA%D0%B5%D1%80

(Если учет всех комбинаций займет слишком много времени - допускается реализация части из них, например половины)



Страница калькулятора должна содержать все элементы из сайта-аналога.
 Кроме того перед указанием карт пользователь должен указать количество игроков.
 Дизайн может отличаться, необязательно делать дизайн в стиле игрального стола.
 Рекомендую использовать компоненты из Bootstrap.

Даже если дизайн будет сделан по стандартной теме
 - UX на каждой странице должен быть продуман
 - расположение каждой кнопки,
 поля ввода, размер текста у всех элементов, каждый отступ между элементами должны быть логичны 
(Например заголовок не должен быть меньше чем обычный текст, а расстояние между полями ввода и кнопками должны быть одинаковы в пределах одной формы).

Все карты должны быть прорисованы (как минимум - буква обозначения карты + значок масти),
 в коде карта должна быть сделана в виде директивы, которая принимает параметром номинал карты,
 например:
 <poker-card suit="spades" value="6"></poker-card> - отрисует шестерку пики




Отдельно от задания - темы в которых стоит разобраться в AngularJS:

Директивы, их виды и синтаксис, поля и функции: transclude, scope, restrict, controller, require ,link
scope.$apply, scope.$digest
 - как они работают, когда могут понадобиться, зачем вообще нужны
Сервисы, фабрики и провайдеры 
- в каком случае что из них нужно применять
Компонентный подход в последних версиях AngularJS (1.5, 1.6) 
- в чем отличие от директив и контроллеров, зачем это нужно
Роутинг с использованием ui-router 
- преимущества перед стандартным
One-time bindings - зачем нужны